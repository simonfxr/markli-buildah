#!/usr/bin/env bash

die() { echo "Error: $*" >&2; exit 1; }

require_bin() { type -P "$1" 2>/dev/null || die "$1 not found in \$PATH"; }

require_file() { [[ -f $1 ]] || die "no such file: $1"; printf '%s' "$1"; }

BUILDAH_BIN=$(require_bin buildah)
MARKLI_BIN=$(require_bin markli)

usage() {
    cat <<END_USAGE
Usage: $(basename "${BASH_SOURCE[0]}") OPTIONS... [--] [DIR]

Options:
  DIR
      Specify a directory where a markli-buildah.md can be found, if --tmp-dir
      is not specified, it will also be used as the markli output directory.
      Defaults to the current directory.

  -t TAG, --tag=TAG
      Set the image tag, by default the directory name of the input markdown
      file is used.

  -i FILE, --input=FILE
      Add an input markdown file, can be specified multiple times. If no input
      file is given, defaults to DIR/markli-buildah.md.

  -s SHELL, --shell=SHELL
      Set the internal SHELL variable, which will be used to interpret code
      blocks. Defaults to /bin/sh.

  --tmp-dir[=TMPDIR]
      When this option is given, sets the markli output directory, if --keep is
      not specified, this directory will be deleted afterwards. The TMPDIR
      parameter specifies which temporary directory to use, defaults to \$TMPDIR
      or if unset, /tmp.

  -k, --keep
      When --tmp-dir is given, keep markli output files, instead of deleting
      them.

  -n, --dry-run
      Do not execute any buildah commands, instead print what would be done.
      Markli will still be executed as usual.

  -h, --help
      Print this message.

END_USAGE
}

SHELL=/bin/sh
TAG=''
MD=( )
USETMP=0
KEEP=0
DRYRUN=0

args=$(getopt -o knth:s:i: \
              --long tag:,shell:,input:,tmp-dir::,keep,dry-run,help \
              -n markli-buildah \
              -- "$@") || { usage >&2; exit 3; }

eval set -- "$args"

while (( $# > 0 )); do
    case "$1" in
        --) shift; break ;;
        -t | --tag) TAG="$2"; shift ;;
        -i | --input) MD+=( "$(require_file "$2")" ); shift ;;
        -s | --shell) SHELL="$2"; shift ;;
        --tmp-dir ) USETMP=1; TMPDIR="$2"; shift ;;
        -k | --keep ) KEEP=1 ;;
        -n | --dry-run ) DRYRUN=1 ;;
        -h | --help) usage; exit 0 ;;
        *) die "invalid arg: $1" ;;
    esac
    shift
done

readonly USETMP TMPDIR KEEP DRYRUN

(( $# <= 1 )) || die "too many arguments"

INDIR="${1:-$PWD}"

[[ -d $INDIR ]] || die "No such directory: $INDIR"

INDIR=$(cd "$INDIR"; pwd)
readonly INDIR

(( ${#MD[@]} > 0 )) || {
    inp="$INDIR"/markli-buildah.md
    [[ -r $inp ]] || die "no input file given and $inp does not exist"
    MD+=( "$inp" )
}

[[ $TAG ]] || TAG=$(basename "$(dirname "${MD[0]}")")
readonly TAG

if (( USETMP )); then
    MDDIR=$(mktemp -p "$TMPDIR" -d markli-buildah-"${TAG}".XXXXXXXX)
else
    MDDIR="$INDIR"
fi

MDDIR=$(cd "$MDDIR"; pwd)
readonly MDDIR

set -euo pipefail
shopt -s nullglob

echo "Tag:             $TAG"
echo "Markli output:   $MDDIR"
echo "Input files:     ${MD[*]}"
echo "Default shell:   $SHELL"
echo ""

markli() { "$MARKLI_BIN" "$@"; }

__buildah() { "$BUILDAH_BIN" "$@"; }

buildah() {
    echo "*** buildah $*"
    ((!DRYRUN)) || return 0
    local ret=0
    "$BUILDAH_BIN" "$@" || {
        ret=$?
        echo "*** Error: buildah exited with $ret" >&2
    }
    return $ret
}

markli_args=( )
for arg in "${MD[@]}"; do
    markli_args+=( -i "$arg" )
done

markli "${markli_args[@]}" -o "$MDDIR"

CONTAINER=''

cleanup_tmp() {
    if (( USETMP && !KEEP )); then
        rm -rf "$MDDIR"
    fi
}

on_exit() {
    [[ ! $CONTAINER ]] || {
        buildah rm "$CONTAINER" ||
            echo "Removing $CONTAINER failed (error=$?)" >&2
    }
    cleanup_tmp
}

trap on_exit EXIT

readarray -t files < <(
    find "$MDDIR" -mindepth 1 -maxdepth 1 -type f | sort
)

for file in "${files[@]}"; do
    name=$(basename "$file")
    tag="${name%%_*}"
    rest="${name#${tag}_}"
    op="${rest%%_*}"
    op="${op%.*}"
    case $op in
        FROM)
            [[ ! $CONTAINER ]] || {
                echo "Error: \$CONTAINER already set, multiple FROM sections?" >&2
                false
            }
            # shellcheck disable=SC2207
            from=( $(< "$file") )
            echo "*** buildah from ${from[*]}"
            if (( DRYRUN )); then
                CONTAINER="DRYRUN_CONTAINER"
            else
                CONTAINER=$(__buildah from "${from[@]}")
            fi
            readonly CONTAINER
            ;;
        RUN)
            echo "*** RUN $file"
            # shellcheck disable=SC2086
            buildah run "$CONTAINER" -- $SHELL <"$file"
            ;;
        SHELL)
            SHELL=$(< "$file")
            echo "*** SHELL is now $SHELL"
            ;;
        BLD)
            while read -r ln; do
                if [[ $ln ]]; then
                    eval "buildah $ln"
                fi
            done <"$file"
            ;;
        CONF)
            while read -r ln; do
                if [[ $ln ]]; then
                    eval "buildah config $ln \$CONTAINER"
                fi
            done <"$file"
            ;;
        EVAL)
            eval "$(< "$file")"
            ;;
        *)
            true
            ;;
    esac
done

trap - EXIT
cleanup_tmp

echo "*** Committing $CONTAINER to $TAG"
buildah commit "$CONTAINER"

 "$TAG"
